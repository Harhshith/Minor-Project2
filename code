# Import necessary libraries
from flask import Flask, render_template, request
import numpy as np
import os
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import load_model

file_path = 'C:/Users/Madhuri/AppData/Local/Programs/Python/Python38/Tomato Leaf Disease Prediction/model.h5'
model = load_model(file_path)
print(model)
print("Model Loaded Successfully")

def pred_tomato_disease(tomato_plant):
    test_image = load_img(tomato_plant, target_size=(128, 128)) # Load image
    print("@@ Got Image for prediction")
    
    test_image = img_to_array(test_image) / 255 # Convert image to np array and normalize
    test_image = np.expand_dims(test_image, axis=0) # Change dimension 3D to 4D
    
    result = model.predict(test_image) # Predict diseased plant or not
    print('@@ Raw result =', result)
    
    pred = np.argmax(result, axis=1)
    print(pred)
    
    if pred == 0:
        return "Tomato - Bacterial Spot Disease", 'Tomato-Bacterial-Spot.html'
    elif pred == 1:
        return "Tomato - Early Blight Disease", 'Tomato-Early-Blight.html'
    elif pred == 2:
        return "Tomato - Healthy and Fresh", 'Tomato-Healthy.html'
    elif pred == 3:
        return "Tomato - Late Blight Disease", 'Tomato-Late-Blight.html'
    elif pred == 4:
        return "Tomato - Leaf Mold Disease", 'Tomato-Leaf-Mold.html'
    elif pred == 5:
        return "Tomato - Septoria Leaf Spot Disease", 'Tomato-Septoria-Leaf-Spot.html'
    elif pred == 6:
        return "Tomato - Target Spot Disease", 'Tomato-Target-Spot.html'
    elif pred == 7:
    
        return "Tomato - Tomato Yellow Leaf Curl Virus Disease", 'Tomato-Tomato-Yellow-Leaf-Curl-Virus.html'
        
    elif pred == 8:
        return "Tomato - Tomato Mosaic Virus Disease", 'Tomato-Tomato-Mosaic-Virus.html'
        
    elif pred == 9:
        return "Tomato - Two Spotted Spider Mite Disease", 'Tomato-Two-Spotted-Spider-Mite.html'

# Create flask instance
app = Flask(_name_)

# Render index.html page
@app.route("/", methods=['GET', 'POST'])

def home():
    return render_template('index.html')

# Get input image from client then predict class and render respective .html page

@app.route("/predict", methods=['GET', 'POST'])
def predict():
    if request.method == 'POST':
        file = request.files['image'] # Get input
        filename = file.filename
        print("@@ Input posted =", filename)
        
        file_path = os.path.join('C:/Users/Madhuri/AppData/Local/Programs/Python/Python38/Tomato Leaf Disease Prediction/static/upload/', filename)
        file.save(file_path)
        print("@@ Predicting class......")
        pred, output_page = pred_tomato_disease(tomato_plant=file_path)
        
        return render_template(output_page, pred_output=pred, user_image=file_path)

# For local system & cloud
if _name_ == "_main_":
    app.run(threaded=False, port=8080)
